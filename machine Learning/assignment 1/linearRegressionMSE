# -*- coding: utf-8 -*-
"""Madhu.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1o_YEItOOoZB2cUgxz9NoU5-9Xj9joh19
"""

####### ==========================================================
####### Assignment: Implementing Linear Regression with Gradient Descent
## And Adding Comment for all part wise for better understanding
####### ==========================================================

####### =============================
#######  here we are Importing Libraries
####### =============================
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, r2_score

####### ==========================================================
####### Part (a): Implementation of the Linear Regression Model [50]
####### ==========================================================

####### (a1) Understanding the Linear Regression Algorithm as per given Assign..
####### ---------------------------------------------------
####### Linear Regression assumes:
#######   y = w1*x1 + w2*x2 + ... + wn*xn + b
####### Goal: minimize Mean Squared Error (MSE)
####### Gradient Descent update rules:
#######   w = w - α * dw
#######   b = b - α * db
####### where α = learning rate, m = number of samples

####### (a2) Here we are doing Dataset Preparation
####### ---------------------------------------------------
df = pd.read_csv("/content/sample_data/housing.csv")
print("Dataset Shape:", df.shape)
print(df.head())

####### (a3)  Here we are doing Data Preprocessing
####### ---------------------------------------------------
####### Fill missing values
df["total_bedrooms"].fillna(df["total_bedrooms"].mean(), inplace=True)

####### Encode categorical variable
df = pd.get_dummies(df, columns=["ocean_proximity"], drop_first=True)

####### Split features & target
X = df.drop(columns=["median_house_value"]).values
y = df["median_house_value"].values

####### Standardize features
scaler = StandardScaler()
X = scaler.fit_transform(X)

####### (a4) here we are  Implementing the Linear Regression Model (with Gradient Descent)
####### ---------------------------------------------------
class LinearRegressionGD:
    def __init__(self, learning_rate=0.01, n_iters=1000, l2_lambda=0):
        self.lr = learning_rate
        self.n_iters = n_iters
        self.l2_lambda = l2_lambda  ####### For Ridge regularization
        self.weights = None
        self.bias = None
        self.cost_history = []

    def fit(self, X, y):
        n_samples, n_features = X.shape
        self.weights = np.zeros(n_features)
        self.bias = 0

        for _ in range(self.n_iters):
            y_pred = np.dot(X, self.weights) + self.bias
            error = y_pred - y

            ####### Compute gradients
            dw = (1/n_samples) * (np.dot(X.T, error) + self.l2_lambda * self.weights)
            db = (1/n_samples) * np.sum(error)

            ####### Update parameters
            self.weights -= self.lr * dw
            self.bias -= self.lr * db

            ####### Compute cost (MSE + regularization term)
            cost = (1/(2*n_samples)) * np.sum(error**2) + (self.l2_lambda/(2*n_samples))*np.sum(self.weights**2)
            self.cost_history.append(cost)

    def predict(self, X):
        return np.dot(X, self.weights) + self.bias

####### (a5)Now here we are Training the Model
####### ---------------------------------------------------
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LinearRegressionGD(learning_rate=0.01, n_iters=1000)
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

####### ==========================================================
###################################  For Part (b) start from here : Evaluation and Visualization
####### ==========================================================

####### (b1)  Here we are doing Model Evaluation
####### ---------------------------------------------------
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("Model Evaluation Results:")
print(f"Mean Squared Error (MSE): {mse:.4f}")
print(f"R-squared (R²): {r2:.4f}")

####### (b2) And here we are doing Visualization
####### ---------------------------------------------------

####### (i) This is  Learning Curve
plt.figure(figsize=(8,5))
plt.plot(range(model.n_iters), model.cost_history, color='blue')
plt.title("Learning Curve (MSE vs Iterations)")
plt.xlabel("Iterations")
plt.ylabel("Cost (MSE)")
plt.grid()
plt.show()

####### (ii) And this is comperision between  Actual vs Predicted Scatter Plot
plt.figure(figsize=(6,6))
plt.scatter(y_test, y_pred, alpha=0.5, color='purple')
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')
plt.title("Actual vs Predicted Values")
plt.xlabel("Actual")
plt.ylabel("Predicted")
plt.grid()
plt.show()

"""# New Section"""

